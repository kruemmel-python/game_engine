import * as THREE from 'three'; import { Component } from '../ecs/Component'; import { PlayerController } from './PlayerController'; import { GroundSensor } from './GroundSensor'; import { AudioComponent } from '../audio/AudioComponent';
export class AnimationSM extends Component {
  root?: THREE.Object3D; clips: THREE.AnimationClip[]=[]; private mixer?: THREE.AnimationMixer; private actions: Record<string, THREE.AnimationAction> = {}; private current?: string; footstepUrl?: string; private stepAccum=0; private step?: AudioComponent;
  constructor(opts: Partial<AnimationSM>={}){ super(); Object.assign(this, opts); }
  async onAdded(){ if(!this.clips.length) return; this.mixer = new THREE.AnimationMixer(this.root||this.owner.object3D); const get=(n:string)=>this.clips.find(c=> (c.name||'').toLowerCase().includes(n)); const idle=get('idle')||this.clips[0]; const walk=get('walk')||get('run')||this.clips[0]; const jump=get('jump')||this.clips[0]; const map:any={idle, walk, jump}; for(const k in map){ if(map[k]) this.actions[k]=this.mixer.clipAction(map[k]!); } this.play('idle',0); if(this.footstepUrl){ this.step = new AudioComponent({ url:this.footstepUrl, positional:true, refDistance:4 }); this.owner.addComponent(this.step); } }
  private play(name:string, fade=0.12){ if(this.current===name || !this.actions[name]) return; const next=this.actions[name]; const prev=this.current?this.actions[this.current]:undefined; prev?.fadeOut?.(fade); next.reset().play().fadeIn(fade); this.current=name; }
  update(dt:number){ this.mixer?.update(dt); const ctrl=this.owner.components.find(c=> c instanceof PlayerController) as PlayerController; const sensor=this.owner.components.find(c=> c instanceof GroundSensor) as GroundSensor; const moving=(ctrl?.horizontalSpeed()||0)>0.25; if(!sensor?.grounded) this.play('jump'); else if(moving){ this.play('walk'); this.stepAccum += dt * (ctrl?.horizontalSpeed()||1); if(this.step && (this.step as any)._loaded && this.stepAccum>1.2){ this.step.play(); this.stepAccum=0; } } else { this.play('idle'); this.stepAccum=0; } }
}
